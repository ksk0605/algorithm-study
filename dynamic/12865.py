import sys

"""
# n 물품 개수 (반복수) 
# k 최대 무게
# w , v 무게 / 해당 가치
# 최대한 많이 담으려면 어떻게 해야할까? 

4 7
6 13
4 8
3 6
5 12
      8 8 1314    
1 2 3 4 5 6 7 
          6 6
      4 4 
    3       7
d[j-w][w]
출력 
14 

6과 5는 숫자는 높지만 담으면 다른 물건을 담지 못하므로 최대치를 가져갈 수 없음 
4,3을 넣어서 14를 만드는 것이 가장 효율적 

하나를 담아도 그 숫자가 가장 크다면 그게 좋고 
여러개를 담아서 숫자가 크다면 그걸 선택해야함 

물품 숫자가 100개 이므로 브루트포스하면 100팩토리얼 - 적절한 해답 x 

무게가 기준이 되면 어때? 
1 부터 k까지 각 무게별 최대 가치합을 구하고 그중 최대를 구하자. 




"""

n, k = map(int, sys.stdin.readline().split(' '))

dp = [[0 for _ in range(k+1)] for _ in range(n+1)]


# dp[i][j] = 

# i번째 물건의 무게를 고려할때
for i in range(1, n+1):
    w,v = map(int, sys.stdin.readline().split())
    
    for size in range(1, k+1): 
        # 넣을 수 있는 무게일 때만 고려해서
        if size >= w: 
            # i번째 무게까지 고려할 때 특정 사이즈의 가방에 들어갈 최대 가치는 
            # = 이전 물건의 무게까지만 고려했을 때 가치 vs 지금 무게에서 현재 물건 무게를 뺀 가방에 들어간 가치 + 지금 무게물건 가치
            dp[i][size] = max(dp[i-1][size], dp[i-1][size-w] + v)
        else : 
            dp[i][size] = dp[i-1][size]

print(dp[n][k])